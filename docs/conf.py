# -*- coding: utf-8 -*-

"""
Configuration file for the Sphinx documentation builder.
"""

#pylint: disable=C0103,W0622

import subprocess
import os
import sys
import errno
import sphinx_rtd_theme

# Determine if running on "ReadTheDocs.org"

on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
CWD = os.path.dirname(os.path.abspath(__file__))

# -- Project information -----------------------------------------------------

project = u'burger'
copyright = u'2013-2018, Rebecca Ann Heineman'
author = u'Rebecca Ann Heineman'

# The short X.Y version
version = u'1.0'
# The full version, including alpha/beta/rc tags
release = u'1.0.4'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = \
[
	'sphinx.ext.autodoc',
	'sphinx.ext.doctest',
	'sphinx.ext.intersphinx',
	'sphinx.ext.todo',
	'sphinx.ext.coverage',
	'sphinx.ext.mathjax',
	'sphinx.ext.ifconfig',
	'sphinx.ext.viewcode',
	'sphinx.ext.githubpages',
	'breathe'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = []

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages. See the documentation for
# a list of builtin themes.

html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = ['_themes',]
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further. For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself. Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
html_show_sourcelink = False

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'burgerdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = \
{
	# The paper size ('letterpaper' or 'a4paper').
	#
	# 'papersize': 'letterpaper',

	# The font size ('10pt', '11pt' or '12pt').
	#
	# 'pointsize': '10pt',

	# Additional stuff for the LaTeX preamble.
	#
	# 'preamble': '',

	# Latex figure (float) alignment
	#
	# 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
# author, documentclass [howto, manual, or own class]).
latex_documents = \
[
	(master_doc, 'burger.tex', u'burger Documentation',
		u'Rebecca Ann Heineman', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = \
[
	(master_doc, 'burger', u'burger Documentation', [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
# dir menu entry, description, category)
texinfo_documents = \
[
	(master_doc, 'burger', u'burger Documentation',
		author, 'burger', 'One line description of project.',
		'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

breathe_projects = {
	"burger":"temp/xml/"
}

breathe_default_project = "burger"

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

########################################

def run_doxygen(folder):
	"""
	Run the doxygen make command in the requested folder

	ReadTheDocs.org has doxygen support
	"""

	try:
		retcode = subprocess.call('doxygen', cwd=folder, shell=True)
		if retcode < 0:
			sys.stderr.write("doxygen terminated by signal %s" % (-retcode))
	except OSError as error:
		sys.stderr.write("doxygen execution failed: %s" % error)

########################################

def generate_doxygen_xml(app):
	"""
	Run the doxygen make commands if we're on the ReadTheDocs server
	"""
	#pylint: disable=W0613

	# Doxygen can't create a nested folder. Help it by
	# creating the first folder

	try:
		os.makedirs(os.path.join(CWD, 'temp'))
	except OSError as error:
		if error.errno != errno.EEXIST:
			raise

	run_doxygen(CWD)

	# If on ReadTheDocs.org, copy to public folder
	if on_rtd:
		try:
			retcode = subprocess.call("cp -r temp/html _build/html/doxygen", cwd='.', shell=True)
			if retcode < 0:
				sys.stderr.write("cp terminated by signal %s" % (-retcode))
		except OSError as error:
			sys.stderr.write("cp execution failed: %s" % error)

########################################

def setup(app):
	"""
	Called by breathe to create the doxygen docs
	"""

	# Add hook for building doxygen xml when needed
	app.connect("builder-inited", generate_doxygen_xml)
